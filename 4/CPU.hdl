/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */
CHIP CPU {
    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
        // Decode of the instruction
        Decode(instruction=instruction, A=A, C=C);
        Bits(instruction=instruction, A=A, C=C,
            out[0..2]=j,    // outBits[0..2]
            out[3]=d3,      // outBits[3]
            out[4]=d2,      // outBits[4]
            out[5]=d1,      // outBits[5]
            out[6]=c6,      // outBits[6]
            out[7]=c5,      // outBits[7]
            out[8]=c4,      // outBits[8]
            out[9]=c3,      // outBits[9]
            out[10]=c2,     // outBits[10]
            out[11]=c1,     // outBits[11]
            out[12]=a,      // outBits[12]
            out=false
        );

        // WriteM = d3
        And(a=true, b=d3, out=writeM);

        // If (A-Instruction == 1) out = instruction
        // Else                    out = outALU
        Mux16(a=outALU, b=instruction, sel=A, out=outALUOrInstruction);

        // ARegister: load = d1
        ARegister(in=outALUOrInstruction, load=d1, out=outARegister, out[0..14]=addressM);

        // The mux selector depends on the a bit
        // If outBits[12] == 1 out = inM
        // Else                out = outARegister
        Mux16(a=outARegister, b=inM, sel=a, out=outARegisterOrInM);

        // DRegister: load = d2
        DRegister(in=outALU, load=d2, out=outDRegister);
        
        // ALU:
        // X: D Register
        // Y: A Register Or inM
        ALU(
            x=outDRegister,
            y=outARegisterOrInM,
            zx=c1,          
            nx=c2,
            zy=c3,
            ny=c4,
            f=c5,
            no=c6,
            out=outM,
            out=outALU,
            zr=zr,          // zr = 1 if outM === 0
            ng=ng           // ng = 1 if outM < 0
        );
        
        JMP(in=j, zr=zr, ng=ng, out=outJMP);

        // PC: Reset > Load > Inc
        PC(in=outARegister, load=outJMP, inc=true, reset=reset, out[0..14]=pc);
}