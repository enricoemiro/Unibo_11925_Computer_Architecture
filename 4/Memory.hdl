/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
        // Data (0-16383)
        // 000000000000000 - 011111111111111
        //
        // Screen (16384-24575)
        // 100000000000000 - 101111111111111
        // 
        // Keyboard (24576)
        // 110000000000000
        //
        // DMux4Way
        // {a, b, c, d} = {in, 0, 0, 0} If sel == 00 -> loadData
        //                {0, in, 0, 0} If sel == 01 -> loadData
        //                {0, 0, in, 0} If sel == 10 -> loadScreen
        //                {0, 0, 0, in} If sel == 11 -> Keyboard
        DMux4Way(
            in=load,
            sel=address[13..14], // Choose last two bits of the address
            a=loadData1,
            b=loadData2,
            c=loadScreen,
            d=kb                 // It will not be connected anywhere
        );

        // Data
        Or(a=loadData1, b=loadData2, out=loadData);
        RAM16K(in=in, load=loadData, address=address[0..13], out=outRAM16K);

        // Screen
        Screen(in=in, load=loadScreen, address=address[0..12], out=outScreen);

        // Keyboard
        Keyboard(out=outKeyboard);
        
        // out = a if sel == 00
        //       b if sel == 01
        //       c if sel == 10
        //       d if sel == 11
        Mux4Way16(
            a=outRAM16K,
            b=outRAM16K,
            c=outScreen,
            d=outKeyboard,
            sel=address[13..14],
            out=out
        );
}