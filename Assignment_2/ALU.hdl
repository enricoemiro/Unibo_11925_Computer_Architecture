/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
        /**
         * X and Y
         */
        Z16(in=x, z=zx, out=z16x);
        Z16(in=y, z=zy, out=z16y);
        N16(in=z16x, n=nx, out=n16x);
        N16(in=z16y, n=ny, out=n16y);

        /**
         * if f == 1 x + y
         * else x && y
         *
         * Multiplexor:
         * out = a if sel == 0
         *       b otherwise
         *
         * The Multiplexor definition is applied
         * NB: The order of the inputs is important!
         */
        And16(a=n16x, b=n16y, out=outAnd);
        Add16(a=n16x, b=n16y, out=outAdd);
        Mux16(a=outAnd, b=outAdd, sel=f, out=outF);

        /**
         * Output
         */
        N16(in=outF, n=no, out=out, out[0..15]=out015, out[15]=out15);

        /**
         * Set flags
         *
         * ng = And(outNo[15], true)
         *      Check if a number is positive or negative.
         *      By definition a number is positive if as a 0
         *      to the left most bit, negative otherwise
         *
         * zr = Nor16Way(out015)
         */
        And(a=out15, b=true, out=ng);
        Nor16Way(in=out015, out=zr);
}